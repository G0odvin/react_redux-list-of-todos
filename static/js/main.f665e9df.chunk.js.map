{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","defaultState","filterReducer","data","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodo","className","map","classNames","id","completed","title","onClick","addTodoActions","TodoFilter","onSubmit","event","preventDefault","onChange","value","target","filterActions","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","Loader","TodoModal","useState","user","setUser","fetchUser","a","userId","selectedUser","useEffect","deleteTodoActions","href","email","name","App","isLoading","setIsLoading","getFilteredTodos","useMemo","item","queryToLowerCase","toLowerCase","filterInput","includes","getTodosFromServer","loadTodosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f665e9df.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetQueryAction = {\n  type: 'filter/SET_QUERY',\n  payload: string,\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS',\n  payload: string,\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: string): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype State = {\n  query: string,\n  status: string,\n};\ntype Action = SetQueryAction | SetStatusAction;\n\nconst defaultState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: State = defaultState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype FetchDataAction = {\n  type: 'Todos/FETCH_DATA',\n  payload: Todo[],\n};\n\nconst fetchData = (data: Todo[]): FetchDataAction => ({\n  type: 'Todos/FETCH_DATA',\n  payload: data,\n});\n\nexport const actions = { fetchData };\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: FetchDataAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'Todos/FETCH_DATA':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as addTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const addTodo = (todoToAdd: Todo) => dispatch(addTodoActions.setTodo(todoToAdd));\n\n  return (\n    <>\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(todo => (\n            <tr\n              data-cy=\"todo\"\n              className={classNames(\n                { 'has-background-info-light': selectedTodo?.id === todo.id },\n              )}\n              key={todo.id}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              {todo.completed ? (\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n              ) : (<td className=\"is-vcentered\" />)}\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames(\n                    'has-text-success',\n                    { 'has-text-danger': !todo.completed },\n                  )}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                {selectedTodo?.id === todo.id ? (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  </button>\n                ) : (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => {\n                      addTodo(todo);\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                )}\n\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const query = useAppSelector(state => state.filter.query);\n\n  const handleSetStatus = (value: string) => {\n    dispatch(filterActions.setStatus(value));\n  };\n\n  const handleSetQuery = (value: string) => {\n    dispatch(filterActions.setQuery(value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => handleSetStatus(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => handleSetQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"Delete\"\n              onClick={() => dispatch(filterActions.setQuery(''))}\n            />\n          )}\n\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as deleteTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useDispatch();\n  const deleteTodo = () => dispatch(deleteTodoActions.removeTodo());\n  const [user, setUser] = useState<User>();\n\n  const fetchUser = async () => {\n    if (currentTodo) {\n      const selectedUser = await getUser(currentTodo?.userId);\n\n      setUser(selectedUser);\n    }\n  };\n\n  useEffect(() => {\n    fetchUser();\n  }, [currentTodo?.id]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user && currentTodo ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => deleteTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const getFilteredTodos = useMemo(() => {\n    const toFilter = todos.filter((item) => {\n      const queryToLowerCase = query.toLowerCase();\n      const filterInput = item.title.toLowerCase().includes(queryToLowerCase);\n\n      switch (status) {\n        case 'active':\n          return !item.completed && filterInput;\n        case 'completed':\n          return item.completed && filterInput;\n        default:\n          return filterInput;\n      }\n    });\n\n    return toFilter;\n  }, [status, todos, query]);\n\n  async function loadTodosFromServer() {\n    const getTodosFromServer = await getTodos();\n\n    dispatch(actions.fetchData(getTodosFromServer));\n    setIsLoading(false);\n  }\n\n  useEffect(() => {\n    loadTodosFromServer();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              <TodoList\n                todos={getFilteredTodos}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}